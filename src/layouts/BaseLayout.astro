---
import '../styles/global.css';
import Nav from "../components/Nav.astro";
import Footer from '../components/Footer.astro';

interface Props {
  title?: string | undefined;
  description?: string | undefined;
  modifier?: string | undefined;
}

const { title, description, modifier, frontmatter } = Astro.props;

const cssModifier = 'home';
---
<html lang="en-gb">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{title && `${title} | `}Dan Matthew is a designer and developer.</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Barlow:ital,wght@0,400;0,700;1,300;1,600&display=swap" rel="stylesheet">
    <script src="https://cdn.usefathom.com/script.js" data-site="XISHJDYZ" data-excluded-domains="localhost" defer></script>
    <!-- <script is:inline>
      // This code is inlined in the head to make dark mode instant & blocking.
      const getThemePreference = () => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      };
      const isDark = getThemePreference() === 'dark';
      document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

      if (typeof localStorage !== 'undefined') {
        // Watch the document element and persist user preference when it changes.
        const observer = new MutationObserver(() => {
          const isDark = document.documentElement.classList.contains('theme-dark');
          localStorage.setItem('theme', isDark ? 'dark' : 'light');
        });
        observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
      }
    </script> -->
    <script defer>
      const konamiCode = '38,38,40,40,37,39,37,39,66,65';
      const keyPresses = [];
      const checkKonami = (e) => {
        keyPresses.push(e.keyCode);
        if (keyPresses.slice(keyPresses.length - 10).join() === konamiCode) {
          runKonami();
        }
      }
      const runKonami = () => {
        console.info('Cheat code activated!');
      }

      document.addEventListener('keyup', checkKonami);
    </script>
    <meta name="description" content="Dan Matthew is a designer and developer from the UK.">
    <meta name="view-transition" content="same-origin">
    <link rel="icon" href="/favicon.ico" sizes="any">
    <link rel="icon" href="/favicon.svg" type="image/svg+xml">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="manifest" href="/site.webmanifest">
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#112caf">
    <meta name="msapplication-TileColor" content="#ffc40d">
    <meta name="theme-color" content="hsl(0, 0%, 99%)">
  </head>
  <body class={modifier}>
    <Nav />
    <slot />
    <Footer />
    <canvas id="gradient-canvas" />

  </body>
</html>
<style>
:root {
  --gradient-color-1: #c3e4ff;
  --gradient-color-2: #6ec3f4;
  --gradient-color-3: #eae2ff;
  --gradient-color-4: #b9beff;
}

#gradient-canvas {
  position: fixed;
  top: 0;
  left: 0;
  z-index: -1;
  width:100%;
  height:100%;
}
</style>
<script>
    import { Gradient } from '../pages/mesh.js'
    const isReducedMotion = window.matchMedia('(prefers-reduced-motion)').matches;

    if (!isReducedMotion) {
    const gradient = new Gradient();
    gradient.initGradient('canvas');
  }
</script>
