---
import { CollectionEntry, getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";

interface Props {
  entry: CollectionEntry<"work">;
}

// This is a dynamic route that generates a page for every Markdown file in src/content/
// Read more about dynamic routes and this `getStaticPaths` function in the Astro docs:
// https://docs.astro.build/en/core-concepts/routing/#dynamic-routes
export async function getStaticPaths() {
  const work = await getCollection("work");
  return work.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

//   const pages = entries.items.map((item) => ({
//     params: { slug: item.fields.slug },
//     props: {
//       title: item.fields.title,
//       machineDate: item.fields.date,
//       date: new Date(item.fields.date).toLocaleDateString("en-gb", {
//         year: "numeric",
//         month: "long",
//       }),
//       summary: item.fields.summary,
//       roles: item.fields.role,
//       content: documentToHtmlString(
//         item.fields.portfolioContent,
//         renderOptions
//       ),
//     },
//   }));

//   return pages;
// }

const { entry } = Astro.props;
// const { content, title, date, machineDate, roles, summary } = Astro.props;
const { Content } = await entry.render();
const cssModifier = "work";
---

<BaseLayout
  title={entry.data.title}
  modifier={cssModifier}
>
  <main>
    <article class="wrapper">
      <header>
        <div class="flow masthead">
          <h1>{entry.data.title}</h1>

          <div class="meta">
            <span class="org">Talis</span>
            <time datetime={entry.data.publishDate}>
              {entry.data.projectDate}
            </time>
          </div>
          {
            entry.data.tags && (
              <ul class="roles">
                {entry.data.tags.map((role) => (
                  <li>{role}</li>
                ))}
              </ul>
            )
          }
          <p class="lede">{entry.data.description}</p>
        </div>
      </header>
      <section class="layout content flow">
        <Content />
      </section>
    </article>
  </main>
</BaseLayout>
<style>
  .content {
    font-size: var(--step-1);
  }

  .roles {
    list-style-type: none;
    padding: 0;
    margin-block-end: 0;
  }

  .meta,
  .roles {
    display: flex;
    justify-content: center;
    font-size: var(--step-0);
  }

  .meta {
    margin-block-start: var(--space-s);
  }

  .roles {
    font-size: var(--step--1);
    flex-wrap: wrap;
  }

  .roles li {
    background-color: var(--gradient-color-2);
    padding: var(--space-3xs) var(--space-2xs);
    color: #fff;
    border-radius: var(--border-radius-m);
    margin-inline-end: var(--space-3xs);
    margin-block-start: var(--space-3xs);
  }

  .meta > *:not(:last-child)::after {
    content: "Â·";
    padding-inline-start: var(--space-3xs);
    margin-inline-end: var(--space-3xs);
  }

  .meta > * + * {
    margin-top: 0;
  }
  [role="list"] {
    padding: 0;
    list-style: none;
  }

  .layout {
    max-width: 65ch;
    margin-block-start: var(--space-m);
    margin-inline: auto;
    padding-inline: clamp(var(--space-xs), 2.5vw, var(--space-xl));
    padding-block: var(--space-l);
    background-color: white;
    border-radius: clamp(4px, 2vw, 32px);
    /* box-shadow: 0 8px 30px rgba(0, 0, 0, 0.06); */
    box-shadow: var(--shadows-elevation2);
  }
</style>
