---
interface Props {
  fields: Object;
}

const { fields } = Astro.props.project;

if (Astro.props.index >= 3) {
  Astro.props.index = 0;
}

let src;

switch (Astro.props.index) {
  case 0:
    src = 'combobox';
    break;
  case 1:
    src = 'elevate';
    break;
  case 2:
    src = 'forms';
  default:
    break;
}

const date = new Date(fields.date).toLocaleDateString('en-gb', {
  year: 'numeric',
  month: 'long',
});

---

<div class="card">
  <img
    src={`../img/${src}@2x.png`}
    alt=""
    width="326"
    height="263"
    loading="lazy"
  >
  <div class="project-details">
    <a href={`/work/${fields.slug}`} class="title">{fields.title}</a>
    <div class="meta">
      <span class="org">Talis</span>
      <time class="date" datetime={fields.date}>{date}</time>
    </div>
    <p>{fields.summary}</p>
  </div>
</div>

<style>
.card {
  position: relative;
}

a {
    display: block;
    color: black;
    transition: transform 0.2s ease;
    text-decoration: underline;
    text-decoration-color: #FABD37;
    text-decoration-thickness: 2px;
    text-underline-offset: .2ex;
    text-decoration-skip-ink: auto;
    transition: text-underline-offset 0.2s ease;
  }

  a:hover {
    text-underline-offset: .3ex;
    transition: text-underline-offset 0.2s ease;
  }

  a:focus {
    outline: none;
  }
  a:focus-visible {
    outline: 2px solid #FABD37;
    outline-offset: 2px;
    /* border-radius: 32px; */
  }


  a:after {
    position: absolute;
    content: '';
    display: block;
    top: 0;
    left: 0;
    right:0;
    bottom: 0;
  }

  img {
    display: block;
    width: 100%;
    object-fit: cover;
    border-radius: var(--border-radius-m);
  }

  .project-details {
    padding: 0 var(--space-xs) var(--space-s) ;
  }


  @keyframes blob {
    0% {
      transform: scale(1) rotate(0deg);
    }
    50% {
      transform: scale(1.1) rotate(20deg);
    }
    100% {
      transform: scale(1);
      transform: scale(1) rotate(0deg);
    }
  }

  .title {
    font-family: 'Playfair Display', serif;
    font-weight: 700;
    font-size: var(--step-1);
    margin-block-start: var(--space-s);
    line-height: var(--leading-tight);
  }
  .meta {
    display: flex;
    font-size: var(--step--1);
    margin-block-start: var(--space-3xs);
  }

  .meta > *:not(:last-child)::after {
    content: 'Â·';
    padding-inline-start: var(--space-3xs);
    margin-inline-end: var(--space-3xs);
  }

  .meta > *+* {
    margin-top: 0;
  }

  time, .org {
  display: block;
}

  p {
    margin-block-start: var(--space-xs);
    line-height: var(--leading-tight);
  }

  .card:hover img,
  .card:focus-within img {
    box-shadow: 0 0 20px 3px hsla(0,0%,40%,.2);

  }

  @media (prefers-reduced-motion: no-preference) and (hover: hover) and (pointer: fine){
    img:has(+ a:hover) {
    animation: 3s infinite alternate blob;
    animation-fill-mode: forwards;
    animation-play-state: running;
  }

  .card img,
  .card:focus-within img {
    transition: all 0.2s cubic-bezier(0.075, 0.82, 0.165, 1) 0s;

  }
  .card:hover img,
  .card:focus-within img {
    /* box-shadow: 0 8px 30px rgba(0,0,0,0.06); */
    transition: all 0.2s cubic-bezier(0.075, 0.82, 0.165, 1) 0s;
    /* transform: scale(1.05); */
  }
}
</style>
