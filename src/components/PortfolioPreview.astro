---
interface Props {
  fields: Object;
}

const { fields } = Astro.props.project;

if (Astro.props.index >= 3) {
  Astro.props.index = 0;
}

const date = new Date(fields.date).toLocaleDateString('en-gb', {
  year: 'numeric',
  month: 'long',
});

---

<div class="card">
  <img
    src={`../src/images/blob-${Astro.props.index}.svg`}
    alt=""
    width="257"
    height="265"
  >
  <a href={`/work/${fields.slug}`} class="title">{fields.title}</a>
  <div class="meta">
    <span class="org">Talis</span>
    <time class="date" datetime={fields.date}>{date}</time>
  </div>
  <p>{fields.summary}</p>
</div>

<style>
.card {
  position: relative;
  padding: var(--space-xs);
  border-radius: var(--border-radius-m);
  transition: all 0.2s cubic-bezier(0.075, 0.82, 0.165, 1) 0s;
  will-change: transform;
  transform-style: preserve-3d;
}

.card:hover,
.card:focus-within {
  background-color: rgba(0,0,0,0.1);

}

a {
    display: block;
    color: white;
    transition: transform 0.2s ease;
    text-decoration: underline;
    text-decoration-color: #FABD37;
    text-decoration-thickness: 2px;
    text-underline-offset: .2ex;
    text-decoration-skip-ink: auto;
    transition: text-underline-offset 0.2s ease;
  }

  a:hover {
    text-underline-offset: .3ex;
    transition: text-underline-offset 0.2s ease;
  }

  a:focus {
    outline: none;
  }

  a:hover:after,
  a:focus:after {
    outline: 2px solid #FABD37;
    outline-offset: 2px;
    border-radius: var(--border-radius-m);
  }


  a:after {
    position: absolute;
    content: '';
    display: block;
    top: 0;
    left: 0;
    right:0;
    bottom: 0;
  }

  img {
    display: block;
    width: 100%;
    margin: 0 auto var(--space-s);
    animation: 3s infinite alternate blob;
    animation-play-state: paused;
  }


  @keyframes blob {
    0% {
      transform: scale(1) rotate(0deg);
    }
    50% {
      transform: scale(1.1) rotate(20deg);
    }
    100% {
      transform: scale(1);
      transform: scale(1) rotate(0deg);
    }
  }
  .title {
    font-family: 'Playfair Display', serif;
    font-size: var(--step-1);
    margin-block-start: var(--space-2xs);
    line-height: var(--leading-tight);
  }
  .meta {
    display: flex;
    font-size: var(--step--1);
    margin-block-start: var(--space-3xs);
  }

  .meta > *:not(:last-child)::after {
    content: 'Â·';
    padding-inline-start: var(--space-3xs);
    margin-inline-end: var(--space-3xs);
  }

  .meta > *+* {
    margin-top: 0;
  }

  time, .org {
  display: block;
}

  p {
    margin-block-start: var(--space-xs);
    line-height: var(--leading-tight);
  }

  @media (prefers-reduced-motion: no-preference) {
    img:has(+a:hover) {
    animation: 3s infinite alternate blob;
    animation-fill-mode: forwards;
    animation-play-state: running;
  }
  .card:hover,
  .card:focus-within {
    box-shadow: rgba(9, 11, 17, 0.01) 0px 28px 11px 0px, rgba(9, 11, 17, 0.03) 0px 16px 10px 0px, rgba(9, 11, 17, 0.05) 0px 7px 7px 0px, rgba(9, 11, 17, 0.06) 0px 2px 4px 0px;
    transition: all 0.2s cubic-bezier(0.075, 0.82, 0.165, 1) 0s;
    transform: scale(1.05);
  }
}
</style>
