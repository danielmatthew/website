---
import { contentfulClient } from '../lib/contentful';

function shuffle(array) {
    let counter = array.length;

    // While there are elements in the array
    while (counter > 0) {
        // Pick a random index
        let index = Math.floor(Math.random() * counter);

        // Decrease counter by 1
        counter--;

        // And swap the last element with it
        let temp = array[counter];
        array[counter] = array[index];
        array[index] = temp;
    }

    return array;
}

const quotes = await contentfulClient.getEntries({
  content_type: 'testimonial',
}).then((response) => {
  return {
    items: shuffle(response.items),
  };
}).then((response) => {
  return {
    items: response.items.slice(0, 9),
  };
});
---

<section class="flow quotes">
  <div class="wrapper">
  <h2 id="testiomonials">Testimonials</h2>
  <ul>
    {quotes.items.map((quote) => (
      <li>
        <blockquote class="flow">
          <p>{quote.fields.quote}</p>
          <div class="meta">
            {quote.fields.author && <span class="author">{quote.fields.author}</span>}
            {quote.fields.authorOrganisation && <span class="org">{quote.fields.authorOrganisation}</span>}
          </div>
        </blockquote>
      </li>
    ))}
  </ul>
</div>
</section>
<style>
  section {
    padding-block-start: var(--space-3xl);

    background-color: var(--light, hsl(0,0%,99%)) var(--dark, var(--theme-article-bg));
  }

  ul {
    --flow-space: 10rem;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24rem, 1fr));
    grid-gap: var(--space-xl);
    list-style: none;
    padding: 0;
    margin: 0;
    margin-block-start: var(--space-xl);
  }

  @media (min-width: 54rem) {
    ul {
      margin-block-start: calc(5.5rem + var(--space-xl));
    }

    li:nth-child(odd) {
    transform: translateY(-7.5rem);
  }

  }

  li {
    background-color: var(--light, #fff) var(--dark, var(--color-theme-400));
    border-radius: 32px;
    box-shadow: 0 8px 30px rgba(0,0,0,0.06);
    overflow: hidden;
  }


  blockquote {
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100%;
  }

  blockquote p::before {
    content: open-quote;
    position: absolute;
    left: 1rem;
    font-size: var(--step-4);
    font-weight: bold;
    line-height: 1;
    color: var(--color-theme-300);
  }

  blockquote p::after {
    content: no-close-quote;
  }

  blockquote p {
    font-size: var(--step-0);
    line-height: var(--leading-loose);
    padding: var(--space-xl);

  }

  .meta {
    display: flex;
    padding: var(--space-s) var(--space-xl);
    font-size: var(--step--1);
    background-clip: padding-box;

  }

  .meta > *:not(:last-child)::after {
    content: 'Â·';
    padding-inline-start: var(--space-3xs);
    margin-inline-end: var(--space-3xs);
  }
</style>
